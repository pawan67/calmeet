// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}



datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model EventType {
  id                String    @id @default(uuid())
  title             String
  color             String?
  durationInMinutes Int?      @default(0)
  isDefault         Boolean   @default(false)
  active            Boolean   @default(true)
  link              String?
  description       String?
  authorId          String
  bookings          Booking[]
}

model Booking {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note        String?
  description String?
  startTime   DateTime
  endTime     DateTime

  // Relating the booking to a Clerk user
  userId String?

  // Relating the booking to a calendar event
  eventId String
  event   EventType @relation(fields: [eventId], references: [id])

  // Additional fields for attendees, guests, etc.
  attendees Attendee[]

  // Enum for the status of the booking
  status String @default("UPCOMING") // UPCOMING, CONFIRMED, CANCELLED, ENDED

  host              String?
  AppointmentSchema AppointmentSchema[]

  timeZone String?

  @@index([startTime, endTime])
}

model Attendee {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String
  email String

  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id])
}

model AppointmentSchema {
  id        String   @id @default(uuid())
  userId    String
  bookingId String
  booking   Booking  @relation(fields: [bookingId], references: [id])
  startTime DateTime
  endTime   DateTime
  timeZone  String?
}
